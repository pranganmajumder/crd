/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pranganmajumder/crd/pkg/apis/appscode.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApploymentLister helps list Apployments.
// All objects returned here must be treated as read-only.
type ApploymentLister interface {
	// List lists all Apployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Apployment, err error)
	// Apployments returns an object that can list and get Apployments.
	Apployments(namespace string) ApploymentNamespaceLister
	ApploymentListerExpansion
}

// apploymentLister implements the ApploymentLister interface.
type apploymentLister struct {
	indexer cache.Indexer
}

// NewApploymentLister returns a new ApploymentLister.
func NewApploymentLister(indexer cache.Indexer) ApploymentLister {
	return &apploymentLister{indexer: indexer}
}

// List lists all Apployments in the indexer.
func (s *apploymentLister) List(selector labels.Selector) (ret []*v1alpha1.Apployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Apployment))
	})
	return ret, err
}

// Apployments returns an object that can list and get Apployments.
func (s *apploymentLister) Apployments(namespace string) ApploymentNamespaceLister {
	return apploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApploymentNamespaceLister helps list and get Apployments.
// All objects returned here must be treated as read-only.
type ApploymentNamespaceLister interface {
	// List lists all Apployments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Apployment, err error)
	// Get retrieves the Apployment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Apployment, error)
	ApploymentNamespaceListerExpansion
}

// apploymentNamespaceLister implements the ApploymentNamespaceLister
// interface.
type apploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Apployments in the indexer for a given namespace.
func (s apploymentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Apployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Apployment))
	})
	return ret, err
}

// Get retrieves the Apployment from the indexer for a given namespace and name.
func (s apploymentNamespaceLister) Get(name string) (*v1alpha1.Apployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apployment"), name)
	}
	return obj.(*v1alpha1.Apployment), nil
}
