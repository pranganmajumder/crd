/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pranganmajumder/crd/pkg/apis/demo.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UserInfoLister helps list UserInfos.
// All objects returned here must be treated as read-only.
type UserInfoLister interface {
	// List lists all UserInfos in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserInfo, err error)
	// UserInfos returns an object that can list and get UserInfos.
	UserInfos(namespace string) UserInfoNamespaceLister
	UserInfoListerExpansion
}

// userInfoLister implements the UserInfoLister interface.
type userInfoLister struct {
	indexer cache.Indexer
}

// NewUserInfoLister returns a new UserInfoLister.
func NewUserInfoLister(indexer cache.Indexer) UserInfoLister {
	return &userInfoLister{indexer: indexer}
}

// List lists all UserInfos in the indexer.
func (s *userInfoLister) List(selector labels.Selector) (ret []*v1alpha1.UserInfo, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserInfo))
	})
	return ret, err
}

// UserInfos returns an object that can list and get UserInfos.
func (s *userInfoLister) UserInfos(namespace string) UserInfoNamespaceLister {
	return userInfoNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UserInfoNamespaceLister helps list and get UserInfos.
// All objects returned here must be treated as read-only.
type UserInfoNamespaceLister interface {
	// List lists all UserInfos in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserInfo, err error)
	// Get retrieves the UserInfo from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UserInfo, error)
	UserInfoNamespaceListerExpansion
}

// userInfoNamespaceLister implements the UserInfoNamespaceLister
// interface.
type userInfoNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UserInfos in the indexer for a given namespace.
func (s userInfoNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UserInfo, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserInfo))
	})
	return ret, err
}

// Get retrieves the UserInfo from the indexer for a given namespace and name.
func (s userInfoNamespaceLister) Get(name string) (*v1alpha1.UserInfo, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("userinfo"), name)
	}
	return obj.(*v1alpha1.UserInfo), nil
}
